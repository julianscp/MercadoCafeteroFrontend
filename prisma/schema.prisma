// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int       @id @default(autoincrement())
  email                 String    @unique
  password              String
  rol                   String    @default("cliente")
  nombre                String            
  direccion             String          
  telefono              String           
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  verificado            Boolean   @default(false)
  verificationCode      String?   
  verificationExpires   DateTime?
  resetToken            String?   //Token temporal de recuperacion
  resetTokenExpiry      DateTime? //Fecha de expiracion (15min)
  failedAttempts        Int       @default(0)
  lockUntil             DateTime?
  Orders                Order[]
  Reclamos              Reclamo[]
  StockLogs             StockLog[]
}

model Product {
  id              Int           @id @default(autoincrement())
  nombre          String
  descripcion     String        @db.VarChar(150)
  precio          Float
  stock           Int
  stockMinimo     Int           @default(0)   
  imagenUrl       String?       
  imagenPublicId  String?       
  categoria       String
  subcategoria    String? 
  marca           String?
  descuento       Float?        
  estado          ProductEstado @default(ACTIVO)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  StockLogs       StockLog[]
  Alertas         Alerta[]       
}

model StockLog {
  id          Int       @id @default(autoincrement())
  producto    Product   @relation(fields: [productoId], references: [id])
  productoId  Int
  cantidad    Int
  tipo        LogTipo
  fecha       DateTime  @default(now())
  usuarioId   Int?
  usuario     User?     @relation(fields: [usuarioId], references: [id])
}

enum ProductEstado {
  ACTIVO
  INACTIVO
  AGOTADO
}

enum LogTipo {
  ENTRADA
  SALIDA
}

model Alerta {
  id              Int       @id @default(autoincrement())
  mensaje         String
  producto        Product   @relation(fields: [productoId], references: [id])
  productoId      Int
  fechaGeneracion DateTime  @default(now())
  atendida        Boolean   @default(false)  
  fechaAtendida   DateTime?
  notificada      Boolean   @default(false)
}

model Order {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  products   Json     // Productos simulados en formato JSON
  total      Float
  status     String   @default("simulado")
  createdAt  DateTime @default(now())
}

model Reclamo {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  orderId    Int?
  mensaje    String
  estado     String   @default("pendiente")
  createdAt  DateTime @default(now())
}

model LogEntry {
  id         Int      @id @default(autoincrement())
  event      String   // Tipo de evento (LOGIN, PURCHASE, etc.)
  level      String   // Nivel de log (INFO, WARN, ERROR, DEBUG)
  message    String   // Mensaje descriptivo
  userId     Int?     // ID del usuario (opcional)
  userEmail  String?  // Email del usuario (opcional)
  metadata   Json?    // Datos adicionales en formato JSON
  timestamp  DateTime @default(now())
  ipAddress  String?  // Direcci√≥n IP del usuario
  userAgent  String?  // User agent del navegador
}